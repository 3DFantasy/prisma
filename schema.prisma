datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// main
// generator client {
//   provider = "prisma-client-js"
// }

// py // python3 -m prisma generate 
generator client {
  provider             = "prisma-client-py"
  recursive_type_depth = 5
}

model Account {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  role      String   @default("USER")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Team {
  id             Int              @id @default(autoincrement())
  geniusTeamId   String?          @unique
  depthChart     DepthChart[]
  DepthChartList DepthChartList[]
  Drives         Drive[]
  Plays          Play[]
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
}

model DepthChartList {
  id        String   @id @default(uuid())
  teamId    Int
  value     String?
  year      Int
  Team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model DepthChart {
  id        String   @id @default(uuid())
  teamId    Int
  title     String
  value     String
  year      Int
  Team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Game {
  id        String   @id
  response  String
  year      Int      @default(2024)
  Drives    Drive[]
  Plays     Play[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Drive {
  id               String   @id @default(uuid())
  gameId           String
  geniusTeamId     String
  number           Int
  isScoring        Boolean  @default(false)
  points           Int?
  nextPointOutcome Int?
  Plays            Play[]
  Team             Team     @relation(fields: [geniusTeamId], references: [geniusTeamId], onDelete: Cascade)
  Game             Game     @relation(fields: [gameId], references: [id], onDelete: Cascade)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model Play {
  id             String   @id @default(uuid())
  gameId         String
  geniusTeamId   String
  driveId        String
  number         Int
  type           String
  subtype        String?
  description    String
  clock          String
  timestamp      BigInt
  phase          String
  phaseQualifier String
  isScoring      Boolean
  startPosition  String
  endPosition    String?
  down           Int?
  distance       String?
  yardLine       Int?
  kicker         String?
  passer         String?
  rusher         String?
  receiver       String?
  defense        String?
  yardsGained    Int?
  puntYards      Int?
  returnYards    Int?
  epa            Float?
  Drive          Drive    @relation(fields: [driveId], references: [id], onDelete: Cascade)
  Team           Team     @relation(fields: [geniusTeamId], references: [geniusTeamId], onDelete: Cascade)
  Game           Game     @relation(fields: [gameId], references: [id], onDelete: Cascade)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}


